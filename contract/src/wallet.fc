;; wallet_id-
;; valid_until+

_ get_contract_state() inline_ref {
     var ds = get_data().begin_parse();
     var result = (
            ds~load_uint(32),
            ds~load_uint(32),
            ds~load_uint(256),
            ds~load_uint(256),
            ds~load_dict()
     );
     ds.end_parse();
     return result;
}

() set_contract_state(int nonce, tx_count, int pubkey_user, int pubkey_validator, cell messages) inline_ref { 
     set_data(begin_cell()
        .store_uint(nonce, 32)
        .store_uint(tx_count, 32)
        .store_uint(pubkey_user, 256)
        .store_uint(pubkey_validator, 256)
        .store_dict(messages)
        .end_cell());
}

;; called by user to submit initial transaction
() submit_transaction(slice msg) {
    var signature = msg~load_bits(512);
    var msg_hash = slice_hash(msg);
    (int nonce, int valid_until, int tx_type, int mode, cell message) = (msg~load_uint(32), msg~load_uint(32), msg~load_uint(8), msg~load_uint(8), msg~load_ref());
    (int stored_nonce, int tx_count, int pubkey_user, int pubkey_validator, cell messages) = get_contract_state();
    var expires_at = 0;
    if (check_signature(msg_hash, signature, pubkey_user)) {
        var expires_at = now();
    } elseif (check_signature(msg_hash, signature, pubkey_validator)) {
        var expires_at = now();
    } else { 
        throw(101);
    }
    throw_unless(102, nonce >= stored_nonce);

    accept_message();

    messages~udict_set_builder(32, tx_count, begin_cell()
        .store_uint(nonce, 32)
        .store_uint(valid_until, 32)
        .store_uint(expires_at, 32)
        .store_uint(tx_type, 8)
        .store_uint(mode, 8)
        .store_ref(message));

    set_contract_state(nonce, tx_count + 1, pubkey_user, pubkey_validator, messages);
}

;; execute the transaction
() execute_transaction(int op, slice msg) {
    (int stored_nonce, int tx_count, int pubkey_user, int pubkey_validator, cell messages) = get_contract_state();

    slice message = begin_cell().end_cell().begin_parse();
    if (op == 0x02) {
        ;; confirm tx
        var signature = msg~load_bits(512);
        var hash = slice_hash(msg);
        int tx_id = msg~load_uint(32);
        throw_unless(101, check_signature(slice_hash(msg), signature, pubkey_validator));

        (slice message, var found?) = messages.udict_get?(32, tx_id);
        throw_unless(39, found?);
    } elseif (op == 0x03) { 
        ;; timeout tx
        int tx_id = msg~load_uint(32);

        (slice message, var found?) = messages.udict_get?(32, tx_id);
        throw_unless(39, found?);

        (int nonce, int valid_until, int expires_at) = (message~load_uint(32), message~load_uint(32), message~load_uint(32));
        throw_unless(103, expires_at <= now());
    }

    (int nonce, int valid_until, slice message) = (message~load_uint(32), message~load_uint(32), message);
    throw_unless(102, nonce == stored_nonce);
    throw_unless(104, valid_until >= now());

    accept_message();

    var msg_type = message~load_uint(8);
    if (msg_type == 0x01) {
        while (msg.slice_refs()) {
            var mode = message~load_uint(8);
            send_raw_message(message~load_ref(), mode);
        }
        nonce += 1;
    } elseif (msg_type == 0x02) {
         (pubkey_user, pubkey_validator) = (message~load_uint(256), message~load_uint(256));
    } else {
        throw(405);
    }

    ;; todo: garbage_collect
    ;; remove all with nonce < nonce

     set_contract_state(nonce, tx_count, pubkey_user, pubkey_validator, messages);
}

() recv_internal(slice msg) impure {
  ;; do nothing for internal messages
}

() recv_external(slice msg) impure {
    var op = msg~load_uint(8);
    if (op == 0x01) {
        submit_transaction(msg);
    } elseif ((op == 0x02) | (op == 0x03)) {
        execute_transaction(op, msg);
    } else {
        throw(404);
    }
}

;; Getters